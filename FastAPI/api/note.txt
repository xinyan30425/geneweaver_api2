__init__.py:

This is an initializer file for a Python module or package. 
When present in a directory, it tells Python that the directory should be treated as a package. 
It can be empty or contain initialization code for the package.


crud.py (Create, Read, Update, Delete):

This file usually contains the functions that directly interact with the database, 
performing the basic operations: creating, reading, updating, and deleting records. 
It serves as a separation layer between the database models and the API endpoints, 
encapsulating the logic for database operations.


database.py:

Here define the database connection and session management. 
For SQLAlchemy, this would typically include the engine, session, and base declarative class used to define models.


endpoints.py:

This file contains the API route definitions. 
Each function in this file corresponds to an endpoint in your API, 
defining the HTTP method (like GET, POST, PUT, DELETE), path, request and response models, and the business logic to be executed when the endpoint is called.

models.py:

Defines the data models for your application. 
These are typically classes that SQLAlchemy uses to map objects to database tables. 
Each class corresponds to a table in the database, and each attribute represents a column.

schemas.py:

Contains Pydantic models that define the structure of requests and responses for your API. 
These models are used for input validation, serialization, and documentation generation. 
They are usually based on the data models but can be tailored to expose or require different fields when interacting with the API.

To use your FastAPI application with the endpoints you've created, follow this workflow:

activate virtual environment:source FastAPI/myenv/bin/activate
get into the FastAPI folder and run the app: cd FastAPI uvicorn run:app --reload

access link: http://127.0.0.1:8000/docs


uvicorn main:app --reload
The --reload flag makes the server restart after code changes. Only use this in development.

Upload your dataset:

Use the /api/upload-genesets/ endpoint to upload your dataset file. This will parse the file and create geneset records in the database.
Create an Analysis Run:

If you have a separate process for analysis, you might start by posting to /api/analysis-runs/ to create a new analysis run.
Get all Genesets:

To see all the genesets you've uploaded, use the GET /api/genesets/ endpoint.
Create a Geneset:

If you need to add more genesets individually, use the POST /api/genesets/ endpoint.
Get a Geneset by ID:

To retrieve a specific geneset, use GET /api/genesets/{geneset_id} with the appropriate ID.
Update a Geneset:

If you need to update a geneset, use the PUT /api/genesets/{geneset_id} endpoint.
Delete a Geneset:

To remove a geneset, use DELETE /api/genesets/{geneset_id}.
Perform Boolean Algebra Operations:

To execute boolean algebra operations on the genesets, use the POST /api/boolean-algebra/ endpoint.
Manage Analysis Runs:

Use GET /api/analysis-runs/ to list all runs.
Use GET /api/analysis-runs/{run_id} to get the status of a specific run.
Use DELETE /api/analysis-runs/{run_id} to cancel a run if needed.
Remember to replace {geneset_id} and {run_id} with actual IDs from your database records.

To perform Boolean Algebra analysis on the uplaoded dataset using the Boolean Algebra tool:
1. Parsing the data:parse the data from the text file into a format that can be processed by the Boolean Algebra tool.
Reading the file, extracting the relevant columns, and converting them into sets of geneset
2. Boolean Algebra analysis will be performed on the Unigene column data, as the set of genes for each GeneWeaver ID.
Each Unigene entry contains a list of genes separated by the pip character "|", which would split into individual genes to create a set
3. Prepare "BooleanAlgebraInput" instances for each Boolean algebra operation will be performed.
This will include specifying the operation type (Union, intersection, difference) and provide the list of gene sets to process
4. Running the analysis: instance the boolean algebra tool, perform the analysis and return the result

Unigene is a database maintained by the National Center for Biotechnology Information for experimental research, 
which provided a set of non-redundant sequences of genes or expressed sequence tages (ESTs)
The Unigene column in the dataset contain a list of identifiers, seperated by the pip charactor "|"
Each identifier in the Unigene column represents a unique cluster of gene expression or sequence data:
each ID corresponds to a particular set of gene expression or sequence data that is considered unique within the database. 
Data are grouped based on sequence similarity, which implies that they may represent that same gene or similar genes. 
The IDs point to a collection of sequences from mRNA and ESTs that appear to come from the same transcription locus(gene or genomic region)


{
  "operation": "union",
  "gene_weaver_ids": [65066, 65243, 65469]
}


{
  "operation": "difference",
  "gene_weaver_ids": [65066, 65243]
}

{
  "operation": "intersection",
  "gene_weaver_ids": [65066, 65243]
}

